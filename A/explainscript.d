#!/usr/sbin/dtrace -qs

/* The line above is the standard shebang used for creating DTrace scripts,
 * with one added option: We add the -q flag to make DTrace only print what we
 * explicitly print in this script */

/* We use this option to automatically intialize all macro
 * variables to zero. We need all macro variables to be initialized
 * to make the trick where we initialize the state variable with a ternary
 * operator work.
 */
#pragma D option defaultargs

/* What follows is an automatically generated script signarture... */

/*
This script was automatically generated by graphviz2dtrace version 0.1
on 2016-05-10 09:51:37.112061 UTC. To run it, make it executable with

chmod +ux

and then run it with root privileges. Example:

sudo myscript.d -c program-to-be-monitored
*/

/*
q0 mapped to 0
q1 mapped to 1
q2 mapped to 3
q3 mapped to 2
q4 mapped to 4
*/

/*
p1 mapped to 1
p2 mapped to 0
*/

int HAS_VERDICT;
int state;
int tf[5][2];

dtrace:::BEGIN
{
	tf[0][0] = 1;
	tf[0][1] = 2;
	tf[1][0] = 4;
	tf[1][1] = 3;
	tf[2][0] = 2;
	tf[2][1] = 2;
	tf[3][0] = 4;
	tf[3][1] = 2;
	tf[4][0] = 4;
	tf[4][1] = 4;
	HAS_VERDICT = 0;

    /* Since none of the probes in this script use macro variables,
     * the first available macro variable is $1. We check if $1
     * is set: If so we set state to the user-provided value.
     * If not, we set it to zero (ie. the start state).
     */
	state = ($1 ? $1: 0);
}

/* This is the first and only 'accepting block' in this script */
p2
/state == 1 ||
state == 3/
{
	trace("ACCEPTED");
	HAS_VERDICT = 1;
	exit(0);
}

/* This is the first and only 'rejecting block' in this script */
p1
/state == 0 ||
state == 3/
{
	trace("REJECTED");
	HAS_VERDICT = 1;
	exit(0);
}

/* following two blocks are 'neutral' blocks which simply update the state of the automaton */
p2
/state == 0/
{
	state = tf[state][0];
}

p1
/state == 1/
{
	state = tf[state][1];
}

/* Finally, we have a block for detecting an inconclusive trace.
 * We check that the dtrace:::END event was not caused by an accepting
 * or rejecting block, and if so, we print out "INCONCLUSIVE".
 * */
dtrace:::END
/ !HAS_VERDICT /
{
	trace("INCONCLUSIVE");
}

